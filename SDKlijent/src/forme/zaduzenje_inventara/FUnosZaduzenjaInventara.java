/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.zaduzenje_inventara;

import domen.Inventar;
import domen.Stanar;
import domen.StavkaZaduzenjaInventara;
import domen.ZaduzenjeInventara;
import forme.zaduzenje_inventara.model.StavkeTableModel;
import help.Helper;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import kontroler.Kontroler;

/**
 *
 * @author Bodin Todorovic
 */
public class FUnosZaduzenjaInventara extends javax.swing.JPanel {

    /**
     * Creates new form FUnosZaduzenjaInventara
     */
    public FUnosZaduzenjaInventara() {
        initComponents();
        srediKombo();
        ZaduzenjeInventara zi = (ZaduzenjeInventara) Helper.getInstance().get("zi");
        if (zi != null) {
            prikazZaduzenja(zi);
            jbtnSacuvaj.setText("Izmeni");
            Helper.getInstance().remove("zi");
            JOptionPane.showMessageDialog(this, "Sistem je pronasao izabrano zaduzenje inventara");
        } else {
            jtxtSifraZaduzenja.setText("0");    //ovde vrati max sifraZaduzenja
            srediFormu();
            srediPolja();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtSifraZaduzenja = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtxtDatumZaduzenja = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jcomboStanar = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblStavkeZaduzenja = new javax.swing.JTable();
        jbtnDodajStavku = new javax.swing.JButton();
        jbtnObrisiStavku = new javax.swing.JButton();
        jbtnSacuvaj = new javax.swing.JButton();
        jtxtReferent = new javax.swing.JTextField();

        jLabel1.setText("Sifra zaduzenja:");

        jtxtSifraZaduzenja.setEditable(false);

        jLabel2.setText("Datum zaduzenja:");

        jtxtDatumZaduzenja.setEnabled(false);

        jLabel3.setText("Stanar:");

        jLabel4.setText("Referent:");

        jcomboStanar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jtblStavkeZaduzenja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtblStavkeZaduzenja);

        jbtnDodajStavku.setText("Dodaj stavku");
        jbtnDodajStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDodajStavkuActionPerformed(evt);
            }
        });

        jbtnObrisiStavku.setText("Obrisi stavku");
        jbtnObrisiStavku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnObrisiStavkuActionPerformed(evt);
            }
        });

        jbtnSacuvaj.setText("Sacuvaj Zaduzenje");
        jbtnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSacuvajActionPerformed(evt);
            }
        });

        jtxtReferent.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcomboStanar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtxtDatumZaduzenja, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtxtSifraZaduzenja, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jtxtReferent))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbtnSacuvaj)
                    .addComponent(jbtnDodajStavku)
                    .addComponent(jbtnObrisiStavku))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtSifraZaduzenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxtDatumZaduzenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcomboStanar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtxtReferent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnDodajStavku)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnObrisiStavku)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnSacuvaj)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnDodajStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDodajStavkuActionPerformed
        // TODO add your handling code here:
        StavkeTableModel mtk = (StavkeTableModel) jtblStavkeZaduzenja.getModel();

        mtk.dodajRed();
    }//GEN-LAST:event_jbtnDodajStavkuActionPerformed

    private void jbtnObrisiStavkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnObrisiStavkuActionPerformed
        // TODO add your handling code here:
        int red = jtblStavkeZaduzenja.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Odaberite red!");
        } else {
            StavkeTableModel model = (StavkeTableModel) jtblStavkeZaduzenja.getModel();
            model.obrisiRed(red);
        }
    }//GEN-LAST:event_jbtnObrisiStavkuActionPerformed

    private void jbtnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSacuvajActionPerformed
        // TODO add your handling code here:
        try {
            StavkeTableModel mtk = (StavkeTableModel) jtblStavkeZaduzenja.getModel();
//            izvrsiValidaciju();
            //---------------------------------------

            ZaduzenjeInventara zaduzenje = new ZaduzenjeInventara();

            DateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            try {
                zaduzenje.setDatumZaduzenja(sdf.parse(jtxtDatumZaduzenja.getText()));
            } catch (ParseException ex) {
//                Logger.getLogger(FUnosZaduzenjaInventara.class.getName()).log(Level.SEVERE, null, ex);
                zaduzenje.setDatumZaduzenja(new Date());
            }

            zaduzenje.setSifraZaduzenja(Integer.parseInt(jtxtSifraZaduzenja.getText()));
            zaduzenje.setReferent(Kontroler.getInstanca().vratiTrenutnogReferenta());
            zaduzenje.setStanar((Stanar) jcomboStanar.getSelectedItem());

            List<StavkaZaduzenjaInventara> lista = mtk.vratiStavke();
            ArrayList<StavkaZaduzenjaInventara> listaStavki = (ArrayList<StavkaZaduzenjaInventara>) lista;

            zaduzenje.setListaStavki(listaStavki);

            izvrsiValidacijuZaduzenja(zaduzenje);
            //---------------------------------------
            String poruka;
            if (jbtnSacuvaj.getText().equals("Sacuvaj Zaduzenje")) {
                System.out.println("Usao u 'Sacuvaj'");
                poruka = Kontroler.getInstanca().sacuvajZaduzenje(zaduzenje);
//                mtk.obrisiCeluListu();

//                srediPolja();
            } else {
                System.out.println("Usao u 'Izmeni'");

                poruka = Kontroler.getInstanca().izmeniZaduzenje(zaduzenje);
            }
            jbtnSacuvaj.setEnabled(false);
            jbtnDodajStavku.setEnabled(false);
            jbtnObrisiStavku.setEnabled(false);
            JOptionPane.showMessageDialog(this, poruka);
        } catch (Exception ex) {
//            Logger.getLogger(FUnosZaduzenjaInventara.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("forme.zaduzenje_inventara.FUnosZaduzenjaInventara - linija 253 - " + ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_jbtnSacuvajActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDodajStavku;
    private javax.swing.JButton jbtnObrisiStavku;
    private javax.swing.JButton jbtnSacuvaj;
    private javax.swing.JComboBox jcomboStanar;
    private javax.swing.JTable jtblStavkeZaduzenja;
    private javax.swing.JTextField jtxtDatumZaduzenja;
    private javax.swing.JTextField jtxtReferent;
    private javax.swing.JTextField jtxtSifraZaduzenja;
    // End of variables declaration//GEN-END:variables

    private void srediKombo() {
        jcomboStanar.removeAllItems();
        ArrayList<Stanar> stanari;
        try {
            stanari = Kontroler.getInstanca().vratiStanare();
        } catch (Exception ex) {
//            Logger.getLogger(FStanar.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("forme.zaduzenje_inventara.FUnosZaduzenjaInventara - linija 281 - " + ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage());
            stanari = new ArrayList<>();
        }
        for (Stanar stanar : stanari) {
            jcomboStanar.addItem(stanar);
        }
    }

    private void srediTabelu() {
        StavkeTableModel mtk = new StavkeTableModel(new ArrayList<>());
        jtblStavkeZaduzenja.setModel(mtk);

        JComboBox<Inventar> jcomboInventar = new JComboBox<>();
        jcomboInventar.removeAllItems();
        ArrayList<Inventar> listaInventara;
        try {
            listaInventara = Kontroler.getInstanca().vratiInventar();
        } catch (Exception ex) {
//            Logger.getLogger(FStanar.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("forme.zaduzenje_inventara.FUnosZaduzenjaInventara - linija 300 - " + ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage());
            listaInventara = new ArrayList<>();
        }
        for (Inventar inventar : listaInventara) {
            jcomboInventar.addItem(inventar);
        }

        DefaultTableColumnModel tcm = (DefaultTableColumnModel) jtblStavkeZaduzenja.getColumnModel();
        TableColumn kolona = tcm.getColumn(2);
        kolona.setCellEditor(new DefaultCellEditor(jcomboInventar));
    }

    private void srediPolja() {
        DateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
        jtxtDatumZaduzenja.setText(sdf.format(new Date()));

        jtxtReferent.setText(Kontroler.getInstanca().vratiTrenutnogReferenta().toString());

        //jtxtSifraZaduzenja.setText(Kontroler.getInstanca().vratiMaxVrednostPolja(new ZaduzenjeInventara()).toString());
    }

    private void srediFormu() {
        try {
            //        srediPolja();
//        srediTabelu();
//            StavkeZaduzenjaTableModel mtk = new StavkeZaduzenjaTableModel(new ArrayList<>());
            StavkeTableModel mtk = new StavkeTableModel(new ArrayList<>());
            jtblStavkeZaduzenja.setModel(mtk);

            JComboBox jcomboInventar = new JComboBox();
            ArrayList<Inventar> listaInventara = Kontroler.getInstanca().vratiInventar();
            for (Inventar inventar : listaInventara) {
                jcomboInventar.addItem(inventar);
            }

            TableColumnModel tcm = jtblStavkeZaduzenja.getColumnModel();
            TableColumn tcInventar = tcm.getColumn(2);
            tcInventar.setCellEditor(new DefaultCellEditor(jcomboInventar));
        } catch (Exception ex) {
//            Logger.getLogger(FUnosZaduzenjaInventara.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("forme.zaduzenje_inventara.FUnosZaduzenjaInventara - linija 365 - " + ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    private void prikazZaduzenja(ZaduzenjeInventara zi) {
        try {
            DateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            //------------------------------------
            try {
                ZaduzenjeInventara zaduzenje = Kontroler.getInstanca().vratiOdredjenoZaduzenje(zi);

                jtxtSifraZaduzenja.setText(zaduzenje.getSifraZaduzenja() + "");
                jtxtDatumZaduzenja.setText(sdf.format(zaduzenje.getDatumZaduzenja()));
                jtxtReferent.setText(zaduzenje.getReferent().toString());
                jcomboStanar.setSelectedItem(zaduzenje.getStanar());

                StavkeTableModel tm = new StavkeTableModel(zaduzenje.getListaStavki());
                jtblStavkeZaduzenja.setModel(tm);
            } catch (Exception ex) {
                jtxtSifraZaduzenja.setText(zi.getSifraZaduzenja() + "");
                jtxtDatumZaduzenja.setText(sdf.format(zi.getDatumZaduzenja()));
                jtxtReferent.setText(zi.getReferent().toString());
                jcomboStanar.setSelectedItem(zi.getStanar());

                StavkeTableModel tm = new StavkeTableModel(zi.getListaStavki());
                jtblStavkeZaduzenja.setModel(tm);
            }
            //------------------------------------
//            jtxtSifraZaduzenja.setText(zi.getSifraZaduzenja() + "");
//            jtxtDatumZaduzenja.setText(sdf.format(zi.getDatumZaduzenja()));
//            jtxtReferent.setText(zi.getReferent().toString());
//            jcomboStanar.setSelectedItem(zi.getStanar());
//
//            StavkeTableModel tm = new StavkeTableModel(zi.getListaStavki());
//            jtblStavkeZaduzenja.setModel(tm);

            JComboBox jcomboInventar = new JComboBox();

            ArrayList<Inventar> listaInventara = Kontroler.getInstanca().vratiInventar();
            for (Inventar inventar : listaInventara) {
                jcomboInventar.addItem(inventar);
            }

            TableColumnModel tcm = jtblStavkeZaduzenja.getColumnModel();
            TableColumn tcInventar = tcm.getColumn(2);
            tcInventar.setCellEditor(new DefaultCellEditor(jcomboInventar));
        } catch (Exception ex) {
//            Logger.getLogger(FUnosZaduzenjaInventara.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("forme.zaduzenje_inventara.FUnosZaduzenjaInventara - linija 393 - " + ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void izvrsiValidacijuZaduzenja(ZaduzenjeInventara zaduzenje) throws Exception {
        int brojac = 0;
        for (StavkaZaduzenjaInventara stavka : zaduzenje.getListaStavki()) {
            if (!stavka.getStatus().equals("delete")) {
                brojac++;
            }
        }
        if (brojac == 0) {
            throw new Exception("Zaduzenje mora imati bar jednu stavku");
        }

        for (StavkaZaduzenjaInventara stavka : zaduzenje.getListaStavki()) {
            if (stavka.getKolicina() <= 0 && !stavka.getStatus().equals("delete")) {
                throw new Exception("Kolicina mora biti veca od 0");
            }
        }

        /*
         **  Pravi problem jer se ne brise dugmetom izbaci, mora da se proverava status stavke i redni brojevi umesto
         sifre jer kad ubacis sifra je 0 **
         */
        for (StavkaZaduzenjaInventara stavka : zaduzenje.getListaStavki()) {
            if (!stavka.getStatus().equals("delete")) {
                if (stavka.getInventar().getSifraInventara() == 0) {
                    throw new Exception("Morate izabrati inventar stavke");
                }
                for (StavkaZaduzenjaInventara s : zaduzenje.getListaStavki()) {
                    if (!s.getStatus().equals("delete")) {
                        if (stavka.getInventar().getSifraInventara() == s.getInventar().getSifraInventara()
                                && stavka.getRedniBroj() != s.getRedniBroj()) {
                            throw new Exception("Isti inventar ne moze biti zaduzen u razlicitim stavkama");
                        }
                    }
                }
            }
        }
    }
}
