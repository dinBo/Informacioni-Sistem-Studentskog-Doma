/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.stanar;

import domen.Fakultet;
import domen.Referent;
import domen.Stanar;
import forme.stanar.model.StanarTableModel;
import help.Helper;
import java.awt.BorderLayout;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.TableModel;
import kontroler.Kontroler;

/**
 *
 * @author Bodin Todorovic
 */
public class FPrikazStanara extends javax.swing.JPanel {

    private List<Stanar> sviStanari = new ArrayList<>();
    private List<Stanar> filtriraniStanariImePrezime;
    private List<Stanar> filtriraniStanariFakultet;
    private List<Stanar> filtriraniStanariReferent;
    private List<Stanar> filtriraniStanariSoba;
    private List<Stanar> filtriraniStanariBlokA;
    private List<Stanar> filtriraniStanariBlokB;

    /**
     * Creates new form FPrikazStanara
     */
    public FPrikazStanara() {
        initComponents();
        napuniComboBox();
        postaviFilterPolja();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnlFilter = new javax.swing.JPanel();
        jtxtImePrezime = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jcbFakultet = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jtxtSoba = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jcbReferent = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jcboxBlokA = new javax.swing.JCheckBox();
        jcboxBlokB = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblStanari = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jtxtKriterijumPretrage = new javax.swing.JTextField();
        jbtnPretrazi = new javax.swing.JButton();
        jbtnDetalji = new javax.swing.JButton();

        jpnlFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));

        jtxtImePrezime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtImePrezimeKeyReleased(evt);
            }
        });

        jLabel1.setText(" Ime/Prezime:");

        jcbFakultet.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFakultet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbFakultetActionPerformed(evt);
            }
        });

        jLabel2.setText("Fakultet:");

        jtxtSoba.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtSobaKeyReleased(evt);
            }
        });

        jLabel3.setText("Soba:");

        jcbReferent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbReferent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbReferentActionPerformed(evt);
            }
        });

        jLabel5.setText("Referent:");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Blok:"));

        jcboxBlokA.setSelected(true);
        jcboxBlokA.setText("A");
        jcboxBlokA.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcboxBlokAItemStateChanged(evt);
            }
        });

        jcboxBlokB.setSelected(true);
        jcboxBlokB.setText("B");
        jcboxBlokB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcboxBlokBItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jcboxBlokA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcboxBlokB)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcboxBlokA)
                    .addComponent(jcboxBlokB))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpnlFilterLayout = new javax.swing.GroupLayout(jpnlFilter);
        jpnlFilter.setLayout(jpnlFilterLayout);
        jpnlFilterLayout.setHorizontalGroup(
            jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtxtImePrezime)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(jtxtSoba)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnlFilterLayout.createSequentialGroup()
                        .addGroup(jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcbFakultet, 0, 160, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbReferent, 0, 159, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jpnlFilterLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpnlFilterLayout.setVerticalGroup(
            jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlFilterLayout.createSequentialGroup()
                .addGroup(jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtImePrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbFakultet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbReferent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnlFilterLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtSoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jtblStanari.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ime:", "Prezime:", "Ime Roditelja:", "Broj Sobe:", "Blok:", "Datum Rodjenja:", "Godina Upisa:", "Fakultet:", "Referent:"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblStanari);

        jLabel4.setText("Kriterijum pretrage:");

        jbtnPretrazi.setText("Pretrazi");
        jbtnPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPretraziActionPerformed(evt);
            }
        });

        jbtnDetalji.setText("Detalji");
        jbtnDetalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDetaljiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jtxtKriterijumPretrage, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtnPretrazi))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jpnlFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 812, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbtnDetalji)))
                .addContainerGap(260, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtxtKriterijumPretrage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnPretrazi))
                .addGap(18, 18, 18)
                .addComponent(jpnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbtnDetalji)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtImePrezimeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtImePrezimeKeyReleased
        //PAZI NA PRENOS PREKO REFERENCE!!!
        //sviStanari = Kontroler.vratiStanare();
        List<Stanar> pomocnaStanari = new ArrayList<>();
        String otkucano = jtxtImePrezime.getText().trim().toLowerCase();
        for (Stanar stanar : sviStanari) {
            if (stanar.getIme().toLowerCase().startsWith(otkucano) || stanar.getPrezime().toLowerCase().startsWith(otkucano)) {
                pomocnaStanari.add(stanar);
            }
        }
        filtriraniStanariImePrezime = pomocnaStanari;
        zapamtiFilter(filtriraniStanariImePrezime, filtriraniStanariFakultet, filtriraniStanariReferent, filtriraniStanariSoba,
                filtriraniStanariBlokA, filtriraniStanariBlokB);
    }//GEN-LAST:event_jtxtImePrezimeKeyReleased

    private void jcbFakultetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbFakultetActionPerformed
        List<Stanar> pomocnaStanari = new ArrayList<>();
        filtriraniStanariFakultet = sviStanari;
        try {
            Fakultet fakultet = (Fakultet) jcbFakultet.getSelectedItem();
            for (Stanar stanar : sviStanari) {
                if (stanar.getFakultet().getFakultetID() == fakultet.getFakultetID()) {
                    pomocnaStanari.add(stanar);
                }
            }
            filtriraniStanariFakultet = pomocnaStanari;
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        //popuniTabelu(filtriraniStanari);
        zapamtiFilter(filtriraniStanariImePrezime, filtriraniStanariFakultet, filtriraniStanariReferent, filtriraniStanariSoba,
                filtriraniStanariBlokA, filtriraniStanariBlokB);
    }//GEN-LAST:event_jcbFakultetActionPerformed

    private void jtxtSobaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtSobaKeyReleased
        char c = evt.getKeyChar();
        List<Stanar> pomocnaStanari = new ArrayList<>();
        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE))) {
            System.out.println(c);
            evt.consume();
        } else {
            try {
                int otkucano = Integer.parseInt(jtxtSoba.getText());
                for (Stanar stanar : sviStanari) {
                    if (stanar.getBrojSobe() == otkucano) {
                        pomocnaStanari.add(stanar);
                    }
                }
                filtriraniStanariSoba = pomocnaStanari;
            } catch (NumberFormatException ex) {
                System.out.println(ex.getMessage());
                filtriraniStanariSoba = sviStanari;
            }
        }
        zapamtiFilter(filtriraniStanariImePrezime, filtriraniStanariFakultet, filtriraniStanariReferent, filtriraniStanariSoba,
                filtriraniStanariBlokA, filtriraniStanariBlokB);
    }//GEN-LAST:event_jtxtSobaKeyReleased

    private void jcbReferentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbReferentActionPerformed
        List<Stanar> pomocnaStanari = new ArrayList<>();
        filtriraniStanariReferent = sviStanari;
        try {
            Referent referent = (Referent) jcbReferent.getSelectedItem();
            for (Stanar stanar : sviStanari) {
                if (stanar.getReferent().getReferentID() == referent.getReferentID()) {
                    pomocnaStanari.add(stanar);
                }
            }
            filtriraniStanariReferent = pomocnaStanari;
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        //popuniTabelu(filtriraniStanari);
        zapamtiFilter(filtriraniStanariImePrezime, filtriraniStanariFakultet, filtriraniStanariReferent, filtriraniStanariSoba,
                filtriraniStanariBlokA, filtriraniStanariBlokB);
    }//GEN-LAST:event_jcbReferentActionPerformed

    private void jcboxBlokAItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcboxBlokAItemStateChanged
        //PAZI NA PRENOS PREKO REFERENCE!!!
        List<Stanar> pomocnaStanari = new ArrayList<>();
        if (!jcboxBlokA.isSelected()) {
            for (Stanar stanar : sviStanari) {
                if (stanar.getBlok().equalsIgnoreCase("B")) {
                    pomocnaStanari.add(stanar);
                }
            }
        } else {
            pomocnaStanari = sviStanari;
        }
        filtriraniStanariBlokA = pomocnaStanari;
        zapamtiFilter(filtriraniStanariImePrezime, filtriraniStanariFakultet, filtriraniStanariReferent, filtriraniStanariSoba,
                filtriraniStanariBlokA, filtriraniStanariBlokB);
    }//GEN-LAST:event_jcboxBlokAItemStateChanged

    private void jcboxBlokBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcboxBlokBItemStateChanged
        //PAZI NA PRENOS PREKO REFERENCE!!!
        List<Stanar> pomocnaStanari = new ArrayList<>();
        if (!jcboxBlokB.isSelected()) {
            for (Stanar stanar : sviStanari) {
                if (stanar.getBlok().equalsIgnoreCase("A")) {
                    pomocnaStanari.add(stanar);
                }
            }
        } else {
            pomocnaStanari = sviStanari;
        }
        filtriraniStanariBlokB = pomocnaStanari;
        zapamtiFilter(filtriraniStanariImePrezime, filtriraniStanariFakultet, filtriraniStanariReferent, filtriraniStanariSoba,
                filtriraniStanariBlokA, filtriraniStanariBlokB);
    }//GEN-LAST:event_jcboxBlokBItemStateChanged

    private void jbtnPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPretraziActionPerformed
        // TODO add your handling code here:
        try {
            String kriterijum = jtxtKriterijumPretrage.getText();
            List<Stanar> listaStanara = Kontroler.getInstanca().vratiStanareSaPretragom(kriterijum);

            if (!listaStanara.isEmpty()) {
                sviStanari = listaStanara;
                resetujFiltere();
                popuniTabelu(listaStanara);
                if (evt.getSource().equals(jbtnPretrazi)) {
                    JOptionPane.showMessageDialog(this, "Sistem je pronasao stanare");
                }

            } else {
                sviStanari = listaStanara;
                resetujFiltere();
                popuniTabelu(new ArrayList<>());
                if (evt.getSource().equals(jbtnPretrazi)) {
                    JOptionPane.showMessageDialog(this, "Ne postoji takav stanar u sistemu");
                }
            }

        } catch (Exception ex) {
            if (evt.getSource().equals(jbtnPretrazi)) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_jbtnPretraziActionPerformed

    private void jbtnDetaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDetaljiActionPerformed
        // TODO add your handling code here:
        int red = jtblStanari.getSelectedRow();
        if (red == -1) {
            JOptionPane.showMessageDialog(this, "Odaberite red!");
        } else {
            StanarTableModel model = (StanarTableModel) jtblStanari.getModel();
            Stanar s = (Stanar) model.vratiStanara(red);
            Helper.getInstance().put("s", s);
            FUnosStanara f = new FUnosStanara();
            Window w = SwingUtilities.getWindowAncestor(FPrikazStanara.this);
            JDialog jd = new JDialog((JDialog) w, "Prikaz stanara", true);
            jd.setLayout(new BorderLayout());
            jd.add(f, BorderLayout.CENTER);
            jd.pack();
            jd.setLocationRelativeTo(null);
            jd.setVisible(true);
            while (jd.isVisible()) {

            }
            jbtnPretraziActionPerformed(evt);

        }
    }//GEN-LAST:event_jbtnDetaljiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnDetalji;
    private javax.swing.JButton jbtnPretrazi;
    private javax.swing.JComboBox jcbFakultet;
    private javax.swing.JComboBox jcbReferent;
    private javax.swing.JCheckBox jcboxBlokA;
    private javax.swing.JCheckBox jcboxBlokB;
    private javax.swing.JPanel jpnlFilter;
    private javax.swing.JTable jtblStanari;
    private javax.swing.JTextField jtxtImePrezime;
    private javax.swing.JTextField jtxtKriterijumPretrage;
    private javax.swing.JTextField jtxtSoba;
    // End of variables declaration//GEN-END:variables

    private void popuniTabelu(List<Stanar> stanari) {
        TableModel model = new StanarTableModel(stanari);
        jtblStanari.setModel(model);
    }

    private void napuniComboBox() {
        jcbFakultet.removeAllItems();
        jcbFakultet.addItem("Svi fakulteti");
        ArrayList<Fakultet> fakulteti;
        try {
            fakulteti = Kontroler.getInstanca().vratiFakultete();
        } catch (Exception ex) {
            Logger.getLogger(FPrikazStanara.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex.getMessage());
            fakulteti = new ArrayList<>();
        }
        for (Fakultet fakultet : fakulteti) {
            jcbFakultet.addItem(fakultet);
        }

        jcbReferent.removeAllItems();
        jcbReferent.addItem("Svi referenti");
        ArrayList<Referent> referenti;
        try {
            referenti = Kontroler.getInstanca().vratiReferente();
        } catch (Exception ex) {
            Logger.getLogger(FPrikazStanara.class.getName()).log(Level.SEVERE, null, ex);
            referenti = new ArrayList<>();
        }
        for (Referent referent : referenti) {
            jcbReferent.addItem(referent);
        }
    }

    private void zapamtiFilter(List<Stanar> filterImePrezime, List<Stanar> filterFakultet, List<Stanar> filterReferent,
            List<Stanar> filterSoba, List<Stanar> filterBlokA, List<Stanar> filterBlokB) {
        List<Stanar> konacniFilter = new ArrayList<>();
        //svi stanari
        for (Stanar stanar : sviStanari) {
            //ime/prezime
            for (Stanar stanarImePrezime : filterImePrezime) {
                if (stanar.getStanarID() == stanarImePrezime.getStanarID()) {
                    //fakultet
                    for (Stanar stanarFakultet : filterFakultet) {
                        if (stanar.getStanarID() == stanarFakultet.getStanarID()) {
                            //referent
                            for (Stanar stanarReferent : filterReferent) {
                                if (stanar.getStanarID() == stanarReferent.getStanarID()) {
                                    //soba
                                    for (Stanar stanarSoba : filterSoba) {
                                        if (stanar.getStanarID() == stanarSoba.getStanarID()) {
                                            //blok A
                                            for (Stanar stanarBlokA : filterBlokA) {
                                                if (stanar.getStanarID() == stanarBlokA.getStanarID()) {
                                                    //blok B
                                                    for (Stanar stanarBlokB : filterBlokB) {
                                                        if (stanar.getStanarID() == stanarBlokB.getStanarID()) {
                                                            konacniFilter.add(stanar);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        popuniTabelu(konacniFilter);
    }

    private void resetujFiltere() {
//        try {
//            sviStanari = Kontroler.getInstanca().vratiStanare();
//        } catch (Exception ex) {
//            Logger.getLogger(FStanar.class.getName()).log(Level.SEVERE, null, ex);
//            sviStanari = new ArrayList<>();
//        }
        filtriraniStanariImePrezime = sviStanari;
        filtriraniStanariFakultet = sviStanari;
        filtriraniStanariReferent = sviStanari;
        filtriraniStanariSoba = sviStanari;
        filtriraniStanariBlokA = sviStanari;
        filtriraniStanariBlokB = sviStanari;
    }

    private void postaviFilterPolja() {
        jtxtImePrezime.setText("");
        jtxtSoba.setText("");
        jcbFakultet.setSelectedIndex(0);
        jcbReferent.setSelectedIndex(0);
        jcboxBlokA.setSelected(true);
        jcboxBlokB.setSelected(true);
    }
}
